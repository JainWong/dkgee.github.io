(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{209:function(e,o,n){"use strict";n.r(o);var s=n(28),r=Object(s.a)({},(function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"docker-compose笔记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose笔记"}},[e._v("#")]),e._v(" Docker-Compose笔记")]),e._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://github.com/docker/compose",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker-compose官网"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/regit/p/8309959.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker-compose命令"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://www.jianshu.com/p/658911a8cff3",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Compose详解"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("在线安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n')])])]),n("p",[e._v("启动Compose")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("# 后台方式启动（默认配置文件名为docker-compose.yml）\ndocker-compose up -d\n\n# 指定文件名后台方式启动\ndocker-compose -f docker-compose-app.yml up -d\n")])])]),n("p",[e._v("卸载")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("sudo rm /usr/local/bin/docker-compose\nsudo pip uninstall docker-compose\n")])])]),n("ul",[n("li",[e._v("项目部署配置参考示例\n"),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/5d1c98d66fb9a07ebf4b8ad5",target:"_blank",rel:"noopener noreferrer"}},[e._v("基于Docker Composed的SpringBoot实战项目mall在Linux环境下的部署"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5d2738a2f265da1bac404299",target:"_blank",rel:"noopener noreferrer"}},[e._v("SpringBoot应用整合ELK实现日志收集"),n("OutboundLink")],1)])])])]),e._v(" "),n("p",[e._v("参考命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("docker-compose up\t# 构建、启动容器\ndocker-compose ps\t# 列出项目中目前的所有容器\ndocker-compose start # 启动容器\ndocker-compose stop\t# 停止正在运行的容器\ndocker-compose -h\t# 查看帮助\ndocker-compose down\t# 停止和删除容器、网络、卷、镜像。\ndocker-compose logs\t# 查看服务容器的输出\ndocker-compose build # 构建（重新构建）项目中的服务容器\ndocker-compose pull\t# 拉取服务依赖的镜像\ndocker-compose restart\t# 重启项目中的服务\ndocker-compose rm\t# 删除所有（停止状态的）服务容器。\ndocker-compose run\t# 在指定服务上执行一个命令。\ndocker-compose scale\t# 设置指定服务运行的容器个数\ndocker-compose pause\t# 暂停一个服务容器\ndocker-compose kill\t# 通过发送SIGKILL信号来强制停止服务容器。\ndokcer-compose config\t# 验证并查看compose文件配置\ndocker-compose create\t# 为服务创建容器。\ndocker-compose exec\t#\ndocker-compose port\t# 显示某个容器端口所映射的公共端口。\ndocker-compose push\t# 推送服务依的镜像。\ndocker-compose stop\t# 显示各个容器运行的进程情况。\ndocker-compose unpause\t# 恢复处于暂停状态中的服务。\ndocker-compose version\t# 打印版本信息。\n")])])]),n("p",[e._v("参考示例")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("第一个Compose")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('version: \'2\'    # 表示该 Docker-Compose 文件使用的是 Version 2 file\nservices:       # 服务列表\n  ciot-web:     # 此处自定义服务名称，如ciot-web本身就是一个\n    build: .    # Dockerfile所在目录\n    container_name: "ciot-web"  # 容器名称\n    ports:              \n      - "8080:8080" # 主机映射端口\n\n========================================================================\nversion: \'2\'\nservices: \n  mysql:\n    image: mymysql:5.7\n    expose:\n        - 3306\n    #ports: \n    #  - "3306:3306"    \n    container_name: "rzxMySql"\n    environment:\n       - MYSQL_ROOT_PASSWORD=123456\n    volumes:\n       - /opt/docker/mysql/conf:/etc/mysql/conf.d\n       - /opt/docker/mysql/logs:/var/log/mysql\n       - /opt/docker/mysql/data:/var/lib/mysql\n        \n        \n  ciot-web:     \n    build: .\n    container_name: "ciot-web"\n    depends_on:\n      - mysql\n    ports: \n      - "8080:8080"\n    links:\n      - mysql:rzxMySql \n========================================================================\ndocker-compose up -d启动起来的容器可能会立即停止，解决办法：加上tty为true\nversion: \'3\'\nservices:\n  fashop1:\n    image: fashop/fashop:v2.0.0\n    ports:\n      - 9510:9510\n    volumes:\n      - ./:/var/www/fashop\n    stdin_open: true\n    tty: true\n    privileged: true        # 获取特权.使用该参数，container内的root拥有真正的root权限。\n    entrypoint: ["php", "/var/www/fashop/fashop", "start"]\n\n  swoole:\n    image: ezkuangren/swoole4\n    ports:\n      - "9511:9510"\n    volumes:\n      - ./:/var/www/project\n    stdin_open: true        # 打开交互模式\n    tty: true               # 分配一个假的终端\n    privileged: true\n========================================================================ES配置\nversion: \'2\'\nservices:\n  es:\n    image: elasticsearch:6.7.0\n    ports:\n      - "9200:9200"\n      - "9300:9300"\n    environment:\n      - xpack.security.enabled=false\n    volumes:\n      - /opt/elk/es/es.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n      - /opt/elk/es/data:/usr/share/elasticsearch/data\n      - /opt/elk/es/plugins:/usr/share/elasticsearch/plugins\n    network_mode: "bridge"\n========================================================================Ngnix配置\nversion: \'2\'\nservices: \n  mynginx:\n    image: nginx/latest   \n    ports: \n      - "80:80"    \n    container_name: "mynginx"\n    volumes:\n       - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n       - /data/nginx/logs:/var/log/nginx\n       - /data/nginx/html:/usr/share/nginx/html\n========================================================================Kafka配置\n#\n# 测试可行，zk与kafka均绑定在host网卡上，可以实现与外界通信\n# 172.30.154.245 为host地址，不能修改为localhost，否则其他网络无法访问\n#\nversion: \'2\'\nservices: \n  myzk:\n    image: jplock/zookeeper   \n    ports: \n      - "2181:2181"\n    network_mode: "host" \n    \n  mykafka:     \n    image: wurstmeister/kafka:latest\n    ports: \n      - "9092:9092"\n    environment:       \n       - KAFKA_ADVERTISED_HOST_NAME=172.30.154.245\n       - KAFKA_ADVERTISED_PORT=9092\n       - KAFKA_ZOOKEEPER_CONNECT=172.30.154.245:2181\n       - KAFKA_DELETE_TOPIC_ENABLE=true\n       - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.30.154.245:9092\n       #- KAFKA_LISTENERS=PLAINTEXT://172.30.154.245:9092  该行没效果\n    network_mode: "host"\n    volumes:\n       - /etc/localtime:/etc/localtime\n')])])])])])}),[],!1,null,null,null);o.default=r.exports}}]);