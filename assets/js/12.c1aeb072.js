(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{211:function(a,t,s){"use strict";s.r(t);var n=s(28),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"dockerfile笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile笔记"}},[a._v("#")]),a._v(" Dockerfile笔记")]),a._v(" "),s("p",[a._v("基础jdk1.8镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("frolvlad/alpine-oraclejre8\t# 镜像内sh命令，不能执行脚本\nfunteam/jdk1.8-mini\t\t# 镜像内sh命令，\nopenjdk:8-jre-alpine\n# 制作镜像\ndocker build -f  xxx.dockerfile -t dkgee/app:v1\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例一")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('# 指明当前镜像继承的基镜像,编译当前镜像时候会自动下载基镜像\nFROM frolvlad/alpine-oraclejre8\n# 当前镜像的作者和邮箱,使用空格隔开\nMAINTAINER  dkgee dk_gee@163.com\n# 挂载目录（在宿主机可以共享访问）\nVOLUME /root\n# 从当前工作目录复制文件到镜像目录中并重新命名\nADD demo-0.0.1.jar demo.jar     \n# 在当前镜像上执行Linux命令\nRUN sh -c \'touch /demo.jar\'\n#对外暴露端口\nEXPOSE 8080\n# 让容器像一个可执行程序一样运行，entrypoint才是正统地用于定义容器启动以后的执行体\nENTRYPOINT ["java", "-jar", "demo.jar"] \n')])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例二")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('# Version: 1.0.1\nFROM ubuntu:latest\nMAINTAINER xxh "xxh@qq.com"\n#设置root用户为后续命令的执行者\nUSER root\n#执行操作\nRUN apt-get update\nRUN apt-get install -y nginx\n#使用&&拼接命令\nRUN touch test.txt && echo "abc" >> abc.txt\nEXPOSE 80 8080 1038\n#添加文件\nADD abc.txt /opt/\n#添加文件夹\nADD /webapp /opt/webapp\n#添加网络文件\nADD https://www.baidu.com/img/bd_logo1.png /opt/\n#设置环境变量\nENV WEBAPP_PORT=9090\n#设置工作目录\nWORKDIR /opt/\n#设置启动命令\nENTRYPOINT ["ls"]\n#设置启动参数\nCMD ["-a", "-l" ]\n#设置卷\nVOLUME ["/data", "/var/www"]\n#设置子镜像的触发操作\nONBUILD ADD . /app/src\nONBUILD RUN echo "on build excuted" >> onbuild.txt\n')])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例三")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("# 表示从docker官方仓库中获取centos基础镜像\nFROM centos\n# 将当前目录下（与Dockerfile同一级目录）的jdk添加到镜像的/usr/local/中\nADD jdk-8u161-linux-x64.tar.gz  /usr/local/\nADD apache-tomcat-8.5.29.tar.gz  /usr/local/\n# 设置Java的环境变量\nENV JAVA_HOME /usr/local/jdk1.8.0_161\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nENV CATALINA_HOME /usr/local/apache-tomcat-8.5.29\nENV CATALINA_BASE /usr/local/apache-tomcat-8.5.29\nENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin\nADD ./TRMS_HK.war /usr/local/apache-tomcat-8.5.29/webapps\n# 对外暴露的端口，便于外部访问\nEXPOSE 8080\n\n# CMD主要作用是默认的容器启动执行命令，容器启动以后，默认的执行的命令；\n# 大多数网上博客论坛说的“cmd会被覆盖”，其实为什么会覆盖？因为cmd的角色定位就是默认，如果你不额外指定，\n# 那么就执行cmd的命令，否则呢？只要你指定了，那么就不会执行cmd，也就是cmd会被覆盖\n# 一个dockerfile至多只能有一个cmd，如果有多个，只有最后一个生效。\nCMD /usr/local/apache-tomcat-8.5.29/bin/catalina.sh run\n")])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例四")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('FROM openjdk:8-jdk-alpine\nVOLUME /tmp\nADD kitty-monitor-1.0.0.jar app.jar\nENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\n')])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例五")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("FROM java:8\nRUN mkdir -p /usr/src/myapp\nCOPY target/gs-rest-service-0.1.0.jar /usr/src/myapp/\nWORKDIR /usr/src/myapp\nEXPOSE 8080\nRUN java -jar gs-rest-service-0.1.0.jar\n")])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例六")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("FROM frolvlad/alpine-oraclejre8\nMAINTAINER dkgee dk_gee@163.com\nADD cms-tsp-web-1.1.3.40-bin.zip /cms-tsp-web-1.1.3.40-bin.zip\nRUN sh -c 'unzip /cms-tsp-web-1.1.3.40-bin.zip'\nEXPOSE 19090\n# CMD /cms-tsp-web-1.1.3.40/start.sh start dev\n")])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例七")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('FROM funteam/jdk1.8-mini\nMAINTAINER dkgee dk_gee@163.com\nADD cms-tsp-web-1.1.3.40-bin.zip /cms-tsp-web-1.1.3.40-bin.zip\nRUN sh -c \'unzip /cms-tsp-web-1.1.3.40-bin.zip\'\nEXPOSE 19090\n#【提示】start.sh脚本中不能以后台模式(nohup)运行，否则启动时会自动退出\nENTRYPOINT ["/cms-tsp-web-1.1.3.40/start.sh", "start", "dev"]\n')])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("示例八")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('# Create image based on the official Node 6 image from dockerhub\nFROM node:6-alpine\nLABEL author="Vijayendra Mudigal"\nMAINTAINER vijayendrap@gmail.com\n\n# Create a directory where our app will be placed\nRUN mkdir -p /usr/src/app\n\n# Change directory so that our commands run inside this new directory\nWORKDIR /usr/src/app\n\n# Copy dependency definitions\nCOPY package.json /usr/src/app\n\n# Install dependecies\nRUN npm install\n\n# Get all the code needed to run the app\nCOPY . /usr/src/app\n\n# Expose the port the app runs in\nEXPOSE 4200\n\n# Serve the app\nCMD ["npm", "start"]\n')])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);